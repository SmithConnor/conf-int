---
title: Confidence Intervals
subtitle: How to be confident about your uncertainty
format: 
    clean-revealjs:
      chalkboard:
        theme: "chalkboard"
        chalkboard-width: 2
        boardmarker-width: 2
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Connor Smith
    orcid: 0000-0002-3955-4348
    email: connor.smith@mq.edu.au
    affiliations: https://smithconnor.github.io/conf-int
date: last-modified
---

```{r}
#| message: false
#| warning: false

library(ggplot2)
set.seed(2405)
```

## An Initial Guess (Point Estimation)

### Lecture Attendance

At the beginning of semester, I guessed that the average lecture attendance would be $105.2$ students. *(Data collected from Weeks 1 to 7)*

::: {.fragment}
i.  This was my best guess, but I was uncertain about it.
:::

::: {.fragment}
ii. I have a few tricks up my sleeve to help me be more confident about my estimate.
:::

## A Better Guess (Interval Estimation)

### Lecture Attendance

I collected data from previous semesters and use this information to improve my estimate.

::: {.fragment}
i.  The smallest average attendance was $81.1$ students.
:::

::: {.fragment}
ii. The largest average attendance was $118.9$ students.
:::

::: {.fragment}
So, to improve my estimate, I can say that the average lecture attendance will probably be between $81.1$ and $118.9$ students.
:::

::: {.fragment}
::: callout-important
## Actual Data

I have been collecting data on lecture attendance for the first seven weeks of semester. The average attendance was $95.2$ students.
:::
:::

## Outline

### Confidence Intervals

If we are estimating a population parameter $\mu$, we can use a confidence interval to express our uncertainty about the estimate.

We can write this confidence interval as

$$
\operatorname{CI} = \Big(L(X),U(X)\Big)
$$

where $L(X)$ is the lower bound and $U(X)$ is the upper bound.

::: callout-note
## Using our data

Since $L(X)$ and $U(X)$ are a function of the random sample $X$, we will use our data to calculate this interval.
:::

## Desirable Properties

### Confidence Intervals

<br>

::: {.fragment}
1.  The confidence interval contains the true population parameter with a specified probability.
:::

<br>

::: {.fragment}
2.  The interval is the shortest possible for a specified probability.
:::

## Counting Dice Example

### Confidence Intervals

::: columns
::: {.column width="50%"}
![Collection of Board Games](images/IMG20240419084234.jpg){fig-align="center" width="80%"}
:::

::: {.column width="50%"}
In tabletop games, dice are used to generate random numbers.

<br>

I have a collection of dice with different numbers of sides. The sides of the dice are $4$, $6$, $8$, $10$, $12$, and $20$.
:::
:::

## Example Cont.

### Confidence Intervals

After purchasing many different dice, I have a bag of $n=100$ dice.

::: columns
::: {.column width="70%"}
```{r}
#| code-fold: true
#| echo: true

N <- 100
sides <- c(4, 6, 8, 10, 12, 20)
dice <- sample(sides, N, replace = TRUE)
```

If I take a sample of size $n=5$ (with replacement), I can calculate the sample mean $\bar{x}$.

```{r}
#| code-fold: true
#| echo: true

n1 <- 5
sample1_dice <- sample(dice, n1, replace = TRUE)
mean1_dice <- mean(sample1_dice)
```

Therefore $\bar{x} = (`r paste(sample1_dice, collapse = "+")`)/`r n1` = `r mean1_dice`$.
:::

::: {.column width="30%"}
```{r}
#| code-fold: true

knitr::kable(
data.frame(sample = 1:n1, sides = sample1_dice),
caption = "First Sample",
format = "html",
col.names = c("Sample", "Sides")
)
```
:::
:::

## Example (Central Limit Theorem)

### Confidence Intervals

We have already learnt about the Central Limit Theorem (CLT) and some of its very useful properties. We now take a larger sample of size $n=30$.

::: columns
::: {.column width="60%"}

```{r}
#| code-fold: true
#| echo: true

n2 <- 30
sample2_dice <- sample(dice, n2, replace = TRUE)
mean2_dice <- mean(sample2_dice)

ggplot(data = data.frame(x = sample2_dice), aes(x = x)) +
geom_histogram(binwidth = 1,
fill = "#107895",
color = "black") +
labs(title = "Second Sample of Dice", x = "Sides", y = "Count") + scale_x_continuous(breaks = sides) + scale_y_continuous(breaks = seq(0, 10, 1)) + theme_minimal() +
theme(
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
title = element_text(size = 24)
)
```

:::

::: {.column width="40%"}

From our new sample:

i. $\bar{x} = `r round(mean2_dice, 2)`$, and

ii. $s = `r round(sd(sample2_dice), 2)`$.

:::
::::

## Example (Confidence Interval)

### Confidence Intervals

We can combine the sample mean and the standard error to create a confidence interval. In the instance, I am interested in creating a $95\%$ confidence interval.

```{r}
#| echo: true
#| code-fold: true

conf_int <- t.test(sample2_dice, conf.level = 0.95)$conf.int
```

A $95\%$ confidence interval for the population mean $\mu_{sides}$ is given by

$$
CI = ( `r round(conf_int[1], 2)` , `r round(conf_int[2], 2)` )
$$




## Example (Actual Count)

### Confidence Intervals

::: columns
::: {.column width="40%"}
```{r}
#| code-fold: true

knitr::kable(
table(dice),
caption = "Dice in the bag",
format = "html",
col.names = c("Dice", "Count")
)
```
:::

::: {.column width="60%"}
Let's see how we did. The table shows the number of each type of dice in the dice bag.

We can see that the population mean is $\mu_{\text{sides}} = `r mean(dice)`$.
:::
:::

## How confident are we?

### Confidence Intervals

The confidence level of the interval is the probability that the interval contains the true population parameter.

$$
P(L(X) \leqslant \mu \leqslant U(X)) = 1 - \alpha
$$

where $\alpha$ (usually $0.05$) is the significance level. We can also think about this as

$$
P(\mu < L(X)) + P(\mu > U(X)) = \alpha
$$

## Normal Distribution

### Confidence Intervals

$$
\bar{X} \overset{approx}\sim N(`r round(mean(sample2_dice),2)`, `r round(sd(sample2_dice),2)`^2/`r n2`)
$$

```{r}
#| echo: true
#| code-fold: true
#| fig-align: center

df <- data.frame(xseq = seq(mean(sample2_dice)-4,mean(sample2_dice)+4,.01), densities = dnorm(seq(mean(sample2_dice)-4,mean(sample2_dice)+4,.01), mean(sample2_dice) , sd(sample2_dice)/sqrt(30)))
ggplot(data = df, aes(x = xseq, y = densities)) +
 geom_point() + labs(title = "Normal Distribution", x = "", y = "Density") + theme_minimal() + theme(
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
title = element_text(size = 24))
```

## Checking our Confidence interval

### Confidence Intervals

:::: columns

::: {.column width="50%"}
\begin{align}
P(\mu < L(X)) & = P(\mu < `r round(conf_int[1], 2)`)\\
& = 0.025
\end{align}

```{r}
#| echo: true
pnorm(7.12, 8.67, 4.15/sqrt(30))
```
:::

::: {.column width="50%"}
\begin{align}
P(\mu > U(X)) & = P(\mu > `r round(conf_int[2], 2)`)\\
& = 0.025
\end{align}

```{r}
#| echo: true
1 - pnorm(10.22, 8.67, 4.15/sqrt(30))
```
:::

::::

\begin{align}
P(L(X) < \mu < U(X)) & = P(7.12 < \mu < 10.22)\\
& = 1 - P(\mu < 7.12) - P(\mu > 10.22)\\
& = 0.95
\end{align}

```{r}
#| echo: true
1 - pnorm(7.12, 8.67, 4.15/sqrt(30)) - (1 - pnorm(10.22, 8.67, 4.15/sqrt(30)))
```


## Confidence Intervals (Interactive)

### observablehq.com/@mattiasvillani/confidence-interval-for-a-mean

```{ojs}
textinfo = md`
Out of a total of ${nrep} samples, ${d3.sum(data.map(d => d.rep <= nrep && (mu >= d.lower && mu <= d.upper)))} (**<span style="color:red">${(d3.sum(data.map(d => d.rep <= nrep && (mu >= d.lower && mu <= d.upper)))*100/nrep).toFixed(3)}%</span>**) of the ${confidence}% confidence intervals contained the true population mean ${tex`\mu= `} ${mu}.
`

viewof nrep = Scrubber(d3.ticks(1, 1000, 1000), {
  autoplay: false,
  loop: false,
  initial: 1,
  delay: 500,
  format: x => `Number of repeats = ${x.toFixed(0)}`
})

plt = Plot.plot({
  style: {fontSize: "12px"},
  width: 960,
  y: {
    label: "Mean",
    domain: lockvertical ? [mu- 3, mu + 3] : [mu - 5*sigma/Math.sqrt(nobs),mu + 5*sigma/Math.sqrt(nobs)]
  },
  x: {
    label: "Sample Number",
    domain:  [0, nrep]
  },
  marks: [
    Plot.ruleX([0]),    
    Plot.ruleX(data, {
      filter: d => (d.rep <= nrep && mu >= d.lower && mu <= d.upper),
      x: "rep",
      y1: "lower",
      y2: "upper",  
      stroke: "#107895",
      strokeWidth: 1.5
    }),
    Plot.dot(data, {filter: d => (d.rep <= nrep && mu >= d.lower && mu <= d.upper), x: "rep", y: "xbar", fill: "#107895", r: 3}),

    Plot.ruleX(data, {
      filter: d => d.rep <= nrep && (mu < d.lower || mu > d.upper),
      x: "rep",
      y1: "lower",
      y2: "upper",  
      stroke: "red",
      strokeWidth: 1.5
    }),
    Plot.dot(data, {filter: d => d.rep <= nrep && (mu < d.lower || mu > d.upper), x: "rep", y: "xbar", fill: "red", r: 3}),
    Plot.ruleY([mu], {stroke: "black", strokeWidth: 1.5})

  ]
})

jstat = require('jstat')

import {Scrubber} from "@mbostock/scrubber"

function simulate_means(mu, sigma, nobs, nrep){
  
  const tvalue = jstat.studentt.inv(1-(1-(confidence/100))/2, nobs-1);
  var data = [];
  for (let j = 1; j <= nrep; j++){
        let sample = d3.range(nobs).map(d => d3.randomNormal(mu,sigma)())
        let xbar = d3.mean(sample)
        let s = jstat.stdev(sample, true) 
        let lower = xbar - tvalue*s/Math.sqrt(nobs)
        let upper = xbar + tvalue*s/Math.sqrt(nobs)
        data.push({rep: j, xbar: xbar, lower: lower, upper: upper})
  }
  return data
}

mu = 9.62

sigma = 4.737088

confidence = 95

nobs = 30

lockvertical = false

data = {
  nobs;
  mu;
  sigma;
  const d = new Date();
  let time = d.getTime();
  const data = simulate_means(mu, sigma, nobs, 1000)
  return data
}
```


## Calculate in R

### Confidence Intervals


If you have a sample `X` you can calculate the confidence interval using the `t.test` function in R.

```{r}
#| echo: true
#| eval: false

t.test(X, conf.level = 0.95)$conf.int
```

This will return the confidence interval for the population mean $\mu_{X}$.

## Example (Interpretation)

### Confidence Intervals

::: {.incremental}
i. The long run proportion of confidence intervals that contain the true population parameter is $1-\alpha$ ($0.95$ if $\alpha = 0.05$).

ii. For a $95\%$ confidence interval, there is a $95\%$ probability that the interval contains the true population parameter. 

iii. There is **NOT** a $95\%$ probability that the true population parameter lies within the interval.

iv. Values within the confidence interval are *"not statistically significantly different"* from the population parameter.

v. Values outside the confidence interval are *"statistically significantly different"* from the population parameter.

:::




## Other Population Parameters

### Confidence Intervals

We can also use confidence intervals to estimate other population parameters. We might also be interested in:

i.  The population variance $\sigma^2$,
ii. The population standard deviation $\sigma$, and
iii. The population proportion $p$.

This list is in no way exhaustive.

# Assessment

## Individual Work

### Formative Assessment

Describe a situation where using a confidence interval instead of a point estimate would be more effective in communicating a topic of interest. (Choose a topic that is related to your major)

-   Links to cohort specific topics,

-   Use case scenarios, and

-   Identify context specific scenarios to shape future assessments.

## Group Work

### Formative Assessment

The group work will be conducted in class the week after the lecture:

(a) Provide a subjective $95\%$ confidence interval for a tutorial specific fact. Discuss.

(b) Repeat step (a) for a new fact but include a point estimate. Discuss.

(c) Create a $95\%$ confidence interval for a new fact using actual data and CLT. Discuss.

## Assessment

### Summative Assessment

Honestly, the combination of written assessment and oral examination is a great way to assess student understanding of confidence intervals.

- Only way to improve the assessment would be to shift from group work to individual work.

## Final Exam

### Summative Assessment

**Analyse:** Done through the linking of confidence intervals with hypothesis testing.

**Evaluate:** Game show where students must guess the price of an item using an interval of fixed length. Question asks students to discuss the size of the interval and how this impacts the players and hosts.

# Pedagogical Approach

## Choice of Approach

### Pedagogical Approach

**Behaviourism:** Due to the content heavy nature of statistics, the initial focus will be on rote learning and memorisation of key concepts.

**Constructivism:** Explored through Tutorials and Workshops, students will be able to construct their own understanding of the material.

**Reflective:** Through individual and group work, students will be able to reflect on their learning and identify areas for improvement.

**Socratic:** The end goal but finding a practical implementation is difficult.

# Educational Excellence

## Initiative 01

### Educational Excellence

Implementation of "Minute Papers" to improve student engagement and feedback.

1.  Identify gaps in knowledge and effectiveness of teaching for a specific cohort.

2.  Share common thoughts and feelings with the student cohort.

3.  Use data to adapt tutorial activities to improve learning outcomes (and address student concerns).

::: callout-tip
## Sydney in 2032 Strategy

*To drive a transformational experience, we will improve how we learn from data and insights from our students, staff and partners to ensure teaching contributes more effectively to desired learning outcomes*
:::

## Initiative 02

### Educational Excellence

Implementation of Universal Design for Learning (UDL) principles to improve inclusivity and accessibility.

1.  Develop a more inclusive learning environment for all students.

2.  Provide a range of teaching and assessment methods to cater for diverse learning styles.

3.  Ensure that all students have the opportunity to succeed, regardless of their background or circumstances.

::: callout-tip
## Sydney in 2032 Strategy

*By ensuring our academic and teaching support staff are highly skilled in inclusive teaching practices, we will be better equipped to support students on their learning journeys.*
:::
